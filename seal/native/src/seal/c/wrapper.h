#include "stdint.h"
long BatchEncoder_Create(void *context, void **batch_encoder);
long BatchEncoder_Destroy(void *thisptr);
long BatchEncoder_Encode1(void *thisptr, uint64_t count, uint64_t *values, void *destination);
long BatchEncoder_Encode2(void *thisptr, uint64_t count, int64_t *values, void *destination);
long BatchEncoder_Decode1(void *thisptr, void *plain, uint64_t *count, uint64_t *destination, void *pool);
long BatchEncoder_Decode2(void *thisptr, void *plain, uint64_t *count, int64_t *destination, void *pool);
long BatchEncoder_GetSlotCount(void *thisptr, uint64_t *slot_count);
long Ciphertext_Create1(void *pool, void **cipher);
long Ciphertext_Create2(void *copy, void **cipher);
long Ciphertext_Create3(void *context, void *pool, void **cipher);
long Ciphertext_Create4(void *context, uint64_t *parms_id, void *pool, void **cipher);
long Ciphertext_Create5(void *context, uint64_t *parms_id, uint64_t capacity, void *pool, void **ciphertext);
long Ciphertext_Reserve1(void *thisptr, void *context, uint64_t *parms_id, uint64_t size_capacity);
long Ciphertext_Reserve2(void *thisptr, void *context, uint64_t size_capacity);
long Ciphertext_Reserve3(void *thisptr, uint64_t size_capacity);
long Ciphertext_Set(void *thisptr, void *assign);
long Ciphertext_Destroy(void *thisptr);
long Ciphertext_Size(void *thisptr, uint64_t *size);
long Ciphertext_SizeCapacity(void *thisptr, uint64_t *size_capacity);
long Ciphertext_PolyModulusDegree(void *thisptr, uint64_t *poly_modulus_degree);
long Ciphertext_CoeffModulusSize(void *thisptr, uint64_t *coeff_modulus_size);
long Ciphertext_ParmsId(void *thisptr, uint64_t *parms_id);
long Ciphertext_SetParmsId(void *thisptr, uint64_t *parms_id);
long Ciphertext_Resize1(void *thisptr, void *context, uint64_t *parms_id, uint64_t size);
long Ciphertext_Resize2(void *thisptr, void *context, uint64_t size);
long Ciphertext_Resize3(void *thisptr, uint64_t size);
long Ciphertext_Resize4(void *thisptr, uint64_t size, uint64_t polyModulusDegree, uint64_t coeffModCount);
long Ciphertext_GetDataAt1(void *thisptr, uint64_t index, uint64_t *data);
long Ciphertext_GetDataAt2(void *thisptr, uint64_t poly_index, uint64_t coeff_index, uint64_t *data);
long Ciphertext_SetDataAt(void *thisptr, uint64_t index, uint64_t value);
long Ciphertext_IsNTTForm(void *thisptr, int *is_ntt_form);
long Ciphertext_SetIsNTTForm(void *thisptr, int is_ntt_form);
long Ciphertext_Scale(void *thisptr, double *scale);
long Ciphertext_SetScale(void *thisptr, double scale);
long Ciphertext_Release(void *thisptr);
long Ciphertext_IsTransparent(void *thisptr, int *result);
long Ciphertext_Pool(void *thisptr, void **pool);
long Ciphertext_SaveSize(void *thisptr, uint8_t compr_mode, int64_t *result);
long Ciphertext_Save(void *thisptr, uint8_t *outptr, uint64_t size, uint8_t compr_mode, int64_t *out_bytes);
long Ciphertext_UnsafeLoad(void *thisptr, void *context, uint8_t *inptr, uint64_t size, int64_t *in_bytes);
long Ciphertext_Load(void *thisptr, void *context, uint8_t *inptr, uint64_t size, int64_t *in_bytes);
long CKKSEncoder_Create(void *context, void **ckks_encoder);
long CKKSEncoder_Destroy(void *thisptr);
long CKKSEncoder_Encode1(
    void *thisptr, uint64_t value_count, double *values, uint64_t *parms_id, double scale, void *destination,
    void *pool);
long CKKSEncoder_Encode2(
    void *thisptr, uint64_t value_count, double *complex_values, uint64_t *parms_id, double scale, void *destination,
    void *pool);
long CKKSEncoder_Encode3(
    void *thisptr, double value, uint64_t *parms_id, double scale, void *destination, void *pool);
long CKKSEncoder_Encode4(
    void *thisptr, double value_re, double value_im, uint64_t *parms_id, double scale, void *destination, void *pool);
long CKKSEncoder_Encode5(void *thisptr, int64_t value, uint64_t *parms_id, void *destination);
long CKKSEncoder_Decode1(void *thisptr, void *plain, uint64_t *value_count, double *values, void *pool);
long CKKSEncoder_Decode2(void *thisptr, void *plain, uint64_t *value_count, double *values, void *pool);
long CKKSEncoder_SlotCount(void *thisptr, uint64_t *slot_count);
long ContextData_Destroy(void *thisptr);
long ContextData_TotalCoeffModulus(void *thisptr, uint64_t *count, uint64_t *total_coeff_modulus);
long ContextData_TotalCoeffModulusBitCount(void *thisptr, int *bit_count);
long ContextData_Parms(void *thisptr, void **parms);
long ContextData_Qualifiers(void *thisptr, void **epq);
long ContextData_CoeffDivPlainModulus(void *thisptr, uint64_t *count, uint64_t *coeff_div);
long ContextData_PlainUpperHalfThreshold(void *thisptr, uint64_t *puht);
long ContextData_PlainUpperHalfIncrement(void *thisptr, uint64_t *count, uint64_t *puhi);
long ContextData_UpperHalfThreshold(void *thisptr, uint64_t *count, uint64_t *uht);
long ContextData_UpperHalfIncrement(void *thisptr, uint64_t *count, uint64_t *uhi);
long ContextData_PrevContextData(void *thisptr, void **prev_data);
long ContextData_NextContextData(void *thisptr, void **next_data);
long ContextData_ChainIndex(void *thisptr, uint64_t *index);
long Decryptor_Create(void *context, void *secret_key, void **decryptor);
long Decryptor_Destroy(void *thisptr);
long Decryptor_Decrypt(void *thisptr, void *encrypted, void *destination);
long Decryptor_InvariantNoiseBudget(void *thisptr, void *encrypted, int *invariant_noise_budget);
long EPQ_Create(void *copy, void **epq);
long EPQ_Destroy(void *thisptr);
long EPQ_ParametersSet(void *thisptr, int *parameters_set);
long EPQ_UsingFFT(void *thisptr, int *using_fft);
long EPQ_UsingNTT(void *thisptr, int *using_ntt);
long EPQ_UsingBatching(void *thisptr, int *using_batching);
long EPQ_UsingFastPlainLift(void *thisptr, int *using_fast_plain_lift);
long EPQ_UsingDescendingModulusChain(void *thisptr, int *using_descending_modulus_chain);
long EPQ_SecLevel(void *thisptr, int *sec_level);
long EPQ_ParameterErrorName(void *thisptr, char *outstr, uint64_t *length);
long EPQ_ParameterErrorMessage(void *thisptr, char *outstr, uint64_t *length);
long EncParams_Create1(uint8_t scheme, void **enc_params);
long EncParams_Create2(void *copy, void **enc_params);
long EncParams_Destroy(void *thisptr);
long EncParams_Set(void *thisptr, void *assign);
long EncParams_GetPolyModulusDegree(void *thisptr, uint64_t *degree);
long EncParams_SetPolyModulusDegree(void *thisptr, uint64_t degree);
long EncParams_GetCoeffModulus(void *thisptr, uint64_t *length, void **coeffs);
long EncParams_SetCoeffModulus(void *thisptr, uint64_t length, void **coeffs);
long EncParams_GetScheme(void *thisptr, uint8_t *scheme);
long EncParams_GetParmsId(void *thisptr, uint64_t *parms_id);
long EncParams_GetPlainModulus(void *thisptr, void **plain_modulus);
long EncParams_SetPlainModulus1(void *thisptr, void *modulus);
long EncParams_SetPlainModulus2(void *thisptr, uint64_t plain_modulus);
long EncParams_Equals(void *thisptr, void *otherptr, int *result);
long EncParams_SaveSize(void *thisptr, uint8_t compr_mode, int64_t *result);
long EncParams_Save(void *thisptr, uint8_t *outptr, uint64_t size, uint8_t compr_mode, int64_t *out_bytes);
long EncParams_Load(void *thisptr, uint8_t *inptr, uint64_t size, int64_t *in_bytes);
long Encryptor_Create(void *context, void *public_key, void *secret_key, void **encryptor);
long Encryptor_SetPublicKey(void *thisptr, void *public_key);
long Encryptor_SetSecretKey(void *thisptr, void *secret_key);
long Encryptor_Encrypt(void *thisptr, void *plaintext, void *destination, void *pool_handle);
long Encryptor_EncryptZero1(void *thisptr, uint64_t *parms_id, void *destination, void *pool_handle);
long Encryptor_EncryptZero2(void *thisptr, void *destination, void *pool_handle);
long Encryptor_EncryptSymmetric(
    void *thisptr, void *plaintext, int save_seed, void *destination, void *pool_handle);
long Encryptor_EncryptZeroSymmetric1(
    void *thisptr, uint64_t *parms_id, int save_seed, void *destination, void *pool_handle);
long Encryptor_EncryptZeroSymmetric2(void *thisptr, int save_seed, void *destination, void *pool_handle);
long Encryptor_Destroy(void *thisptr);
long Evaluator_Create(void *context, void **evaluator);
long Evaluator_Destroy(void *thisptr);
long Evaluator_Negate(void *thisptr, void *encrypted, void *destination);
long Evaluator_Add(void *thisptr, void *encrypted1, void *encrypted2, void *destination);
long Evaluator_AddMany(void *thisptr, uint64_t count, void **encrypteds, void *destination);
long Evaluator_AddPlain(void *thisptr, void *encrypted, void *plain, void *destination);
long Evaluator_Sub(void *thisptr, void *encrypted1, void *encrypted2, void *destination);
long Evaluator_SubPlain(void *thisptr, void *encrypted, void *plain, void *destination);
long Evaluator_Multiply(void *thisptr, void *encrypted1, void *encrypted2, void *destination, void *pool);
long Evaluator_MultiplyMany(
    void *thisptr, uint64_t count, void **encrypteds, void *relin_keys, void *destination, void *pool);
long Evaluator_MultiplyPlain(void *thisptr, void *encrypted, void *plain, void *destination, void *pool);
long Evaluator_Square(void *thisptr, void *encrypted, void *destination, void *pool);
long Evaluator_Relinearize(void *thisptr, void *encrypted, void *relinKeys, void *destination, void *pool);
long Evaluator_ModSwitchToNext1(void *thisptr, void *encrypted, void *destination, void *pool);
long Evaluator_ModSwitchToNext2(void *thisptr, void *plain, void *destination);
long Evaluator_ModSwitchTo1(void *thisptr, void *encrypted, uint64_t *parms_id, void *destination, void *pool);
long Evaluator_ModSwitchTo2(void *thisptr, void *plain, uint64_t *parms_id, void *destination);
long Evaluator_RescaleToNext(void *thisptr, void *encrypted, void *destination, void *pool);
long Evaluator_RescaleTo(void *thisptr, void *encrypted, uint64_t *parms_id, void *destination, void *pool);
long Evaluator_Exponentiate(
    void *thisptr, void *encrypted, uint64_t exponent, void *relin_keys, void *destination, void *pool);
long Evaluator_TransformToNTT1(
    void *thisptr, void *plain, uint64_t *parms_id, void *destination_ntt, void *pool);
long Evaluator_TransformToNTT2(void *thisptr, void *encrypted, void *destination_ntt);
long Evaluator_TransformFromNTT(void *thisptr, void *encrypted_ntt, void *destination);
long Evaluator_ApplyGalois(
    void *thisptr, void *encrypted, uint32_t galois_elt, void *galois_keys, void *destination, void *pool);
long Evaluator_RotateRows(
    void *thisptr, void *encrypted, int steps, void *galoisKeys, void *destination, void *pool);
long Evaluator_RotateColumns(void *thisptr, void *encrypted, void *galois_keys, void *destination, void *pool);
long Evaluator_RotateVector(
    void *thisptr, void *encrypted, int steps, void *galois_keys, void *destination, void *pool);
long Evaluator_ComplexConjugate(
    void *thisptr, void *encrypted, void *galois_keys, void *destination, void *pool);
long Evaluator_ContextUsingKeyswitching(void *thisptr, int *using_keyswitching);
long GaloisKeys_GetIndex(uint32_t galois_elt, uint64_t *index);
long KeyGenerator_Create1(void *context, void **key_generator);
long KeyGenerator_Create2(void *context, void *secret_key, void **key_generator);
long KeyGenerator_Destroy(void *thisptr);
long KeyGenerator_CreateRelinKeys(void *thisptr, int save_seed, void **relin_keys);
long KeyGenerator_CreateGaloisKeysFromElts(
    void *thisptr, uint64_t count, uint32_t *galois_elts, int save_seed, void **galois_keys);
long KeyGenerator_CreateGaloisKeysFromSteps(
    void *thisptr, uint64_t count, int *steps, int save_seed, void **galois_keys);
long KeyGenerator_CreateGaloisKeysAll(void *thisptr, int save_seed, void **galois_keys);
long KeyGenerator_CreatePublicKey(void *thisptr, int save_seed, void **public_key);
long KeyGenerator_SecretKey(void *thisptr, void **secret_key);
long KeyGenerator_ContextUsingKeyswitching(void *thisptr, int *using_keyswitching);
long KSwitchKeys_Create1(void **kswitch_keys);
long KSwitchKeys_Create2(void *copy, void **kswitch_keys);
long KSwitchKeys_Destroy(void *thisptr);
long KSwitchKeys_Set(void *thisptr, void *assign);
long KSwitchKeys_Size(void *thisptr, uint64_t *size);
long KSwitchKeys_RawSize(void *thisptr, uint64_t *key_count);
long KSwitchKeys_GetKeyList(void *thisptr, uint64_t index, uint64_t *count, void **key_list);
long KSwitchKeys_ClearDataAndReserve(void *thisptr, uint64_t size);
long KSwitchKeys_AddKeyList(void *thisptr, uint64_t count, void **key_list);
long KSwitchKeys_GetParmsId(void *thisptr, uint64_t *parms_id);
long KSwitchKeys_SetParmsId(void *thisptr, uint64_t *parms_id);
long KSwitchKeys_Pool(void *thisptr, void **pool);
long KSwitchKeys_SaveSize(void *thisptr, uint8_t compr_mode, int64_t *result);
long KSwitchKeys_Save(void *thisptr, uint8_t *outptr, uint64_t size, uint8_t compr_mode, int64_t *out_bytes);
long KSwitchKeys_UnsafeLoad(void *thisptr, void *context, uint8_t *inptr, uint64_t size, int64_t *in_bytes);
long KSwitchKeys_Load(void *thisptr, void *context, uint8_t *inptr, uint64_t size, int64_t *in_bytes);
long MemoryManager_GetPool1(int prof_opt, int clear_on_destruction, void **pool_handle);
long MemoryManager_GetPool2(void **pool_handle);
long MemoryManager_SwitchProfile(void *new_profile);
long MMProf_CreateGlobal(void **profile);
long MMProf_CreateFixed(void *pool, void **profile);
long MMProf_CreateNew(void **profile);
long MMProf_CreateThreadLocal(void **profile);
long MMProf_GetPool(void *thisptr, void **pool_handle);
long MMProf_Destroy(void *thisptr);
long MemoryPoolHandle_Create1(void **handle);
long MemoryPoolHandle_Create2(void *otherptr, void **handle);
long MemoryPoolHandle_Destroy(void *thisptr);
long MemoryPoolHandle_Set(void *thisptr, void *assignptr);
long MemoryPoolHandle_Global(void **handle);
long MemoryPoolHandle_ThreadLocal(void **handle);
long MemoryPoolHandle_New(int clear_on_destruction, void **handle);
long MemoryPoolHandle_PoolCount(void *thisptr, uint64_t *count);
long MemoryPoolHandle_AllocByteCount(void *thisptr, uint64_t *count);
long MemoryPoolHandle_UseCount(void *thisptr, long *count);
long MemoryPoolHandle_IsInitialized(void *thisptr, int *result);
long MemoryPoolHandle_Equals(void *thisptr, void *otherptr, int *result);
long Modulus_Create1(uint64_t value, void **small_modulus);
long Modulus_Create2(void *copy, void **small_modulus);
long Modulus_Destroy(void *thisptr);
long Modulus_IsZero(void *thisptr, int *is_zero);
long Modulus_IsPrime(void *thisptr, int *is_prime);
long Modulus_Value(void *thisptr, uint64_t *value);
long Modulus_BitCount(void *thisptr, int *bit_count);
long Modulus_UInt64Count(void *thisptr, uint64_t *uint64_count);
long Modulus_Set1(void *thisptr, void *assign);
long Modulus_Set2(void *thisptr, uint64_t value);
long Modulus_ConstRatio(void *thisptr, uint64_t length, uint64_t ratio[]);
long Modulus_Equals1(void *thisptr, void *other, int *result);
long Modulus_Equals2(void *thisptr, uint64_t other, int *result);
long Modulus_SaveSize(void *thisptr, uint8_t compr_mode, int64_t *result);
long Modulus_Save(void *thisptr, uint8_t *outptr, uint64_t size, uint8_t compr_mode, int64_t *out_bytes);
long Modulus_Load(void *thisptr, uint8_t *inptr, uint64_t size, int64_t *in_bytes);
long Modulus_Reduce(void *thisptr, uint64_t value, uint64_t *result);
long CoeffModulus_MaxBitCount(uint64_t poly_modulus_degree, int sec_level, int *bit_count);
long CoeffModulus_BFVDefault(uint64_t poly_modulus_degree, int sec_level, uint64_t *length, void **coeffs);
long CoeffModulus_Create(uint64_t poly_modulus_degree, uint64_t length, int *bit_sizes, void **coeffs);
long Plaintext_Create1(void *memoryPoolHandle, void **plaintext);
long Plaintext_Create2(uint64_t coeffCount, void *memoryPoolHandle, void **plaintext);
long Plaintext_Create3(uint64_t capacity, uint64_t coeffCount, void *memoryPoolHandle, void **plaintext);
long Plaintext_Create4(char *hex_poly, void *memoryPoolHandle, void **plaintext);
long Plaintext_Create5(void *copy, void **plaintext);
long Plaintext_Set1(void *thisptr, void *assign);
long Plaintext_Set2(void *thisptr, char *hex_poly);
long Plaintext_Set3(void *thisptr, uint64_t const_coeff);
long Plaintext_Set4(void *thisptr, uint64_t count, uint64_t *coeffs);
long Plaintext_Destroy(void *thisptr);
long Plaintext_CoeffCount(void *thisptr, uint64_t *coeff_count);
long Plaintext_CoeffAt(void *thisptr, uint64_t index, uint64_t *coeff);
long Plaintext_SetCoeffAt(void *thisptr, uint64_t index, uint64_t value);
long Plaintext_ToString(void *thispt, char *outstr, uint64_t *length);
long Plaintext_IsNTTForm(void *thisptr, int *is_ntt_form);
long Plaintext_IsZero(void *thisptr, int *is_zero);
long Plaintext_SetZero1(void *thisptr);
long Plaintext_SetZero2(void *thisptr, uint64_t start_coeff);
long Plaintext_SetZero3(void *thisptr, uint64_t start_coeff, uint64_t length);
long Plaintext_GetParmsId(void *thisptr, uint64_t *parms_id);
long Plaintext_SetParmsId(void *thisptr, uint64_t *parms_id);
long Plaintext_Reserve(void *thisptr, uint64_t capacity);
long Plaintext_Resize(void *thisptr, uint64_t coeff_count);
long Plaintext_ShrinkToFit(void *thisptr);
long Plaintext_Release(void *thisptr);
long Plaintext_Capacity(void *thisptr, uint64_t *capacity);
long Plaintext_SignificantCoeffCount(void *thisptr, uint64_t *significant_coeff_count);
long Plaintext_NonZeroCoeffCount(void *thisptr, uint64_t *nonzero_coeff_count);
long Plaintext_Scale(void *thisptr, double *scale);
long Plaintext_SetScale(void *thisptr, double scale);
long Plaintext_Equals(void *thisptr, void *other, int *result);
long Plaintext_SwapData(void *thisptr, uint64_t count, uint64_t *new_data);
long Plaintext_Pool(void *thisptr, void **pool);
long Plaintext_SaveSize(void *thisptr, uint8_t compr_mode, int64_t *result);
long Plaintext_Save(void *thisptr, uint8_t *outptr, uint64_t size, uint8_t compr_mode, int64_t *out_bytes);
long Plaintext_UnsafeLoad(void *thisptr, void *context, uint8_t *inptr, uint64_t size, int64_t *in_bytes);
long Plaintext_Load(void *thisptr, void *context, uint8_t *inptr, uint64_t size, int64_t *in_bytes);
long PublicKey_Create1(void **public_key);
long PublicKey_Create2(void *copy, void **public_key);
long PublicKey_Set(void *thisptr, void *assign);
long PublicKey_Data(void *thisptr, void **data);
long PublicKey_ParmsId(void *thisptr, uint64_t *parms_id);
long PublicKey_Pool(void *thisptr, void **pool);
long PublicKey_Destroy(void *thisptr);
long PublicKey_SaveSize(void *thisptr, uint8_t compr_mode, int64_t *result);
long PublicKey_Save(void *thisptr, uint8_t *outptr, uint64_t size, uint8_t compr_mode, int64_t *out_bytes);
long PublicKey_UnsafeLoad(void *thisptr, void *context, uint8_t *inptr, uint64_t size, int64_t *in_bytes);
long PublicKey_Load(void *thisptr, void *context, uint8_t *inptr, uint64_t size, int64_t *in_bytes);
long RelinKeys_GetIndex(uint64_t key_power, uint64_t *index);
long SEALContext_Create(void *encryptionParams, int expand_mod_chain, int sec_level, void **context);
long SEALContext_Destroy(void *thisptr);
long SEALContext_KeyParmsId(void *thisptr, uint64_t *parms_id);
long SEALContext_FirstParmsId(void *thisptr, uint64_t *parms_id);
long SEALContext_LastParmsId(void *thisptr, uint64_t *parms_id);
long SEALContext_ParametersSet(void *thisptr, int *params_set);
long SEALContext_KeyContextData(void *thisptr, void **context_data);
long SEALContext_FirstContextData(void *thisptr, void **context_data);
long SEALContext_LastContextData(void *thisptr, void **context_data);
long SEALContext_GetContextData(void *thisptr, uint64_t *parms_id, void **context_data);
long SEALContext_UsingKeyswitching(void *thisptr, int *using_keyswitching);
long SEALContext_ParameterErrorName(void *thisptr, char *outstr, uint64_t *length);
long SEALContext_ParameterErrorMessage(void *thisptr, char *outstr, uint64_t *length);
long SecretKey_Create1(void **secret_key);
long SecretKey_Create2(void *copy, void **secret_key);
long SecretKey_Set(void *thisptr, void *assign);
long SecretKey_Data(void *thisptr, void **data);
long SecretKey_Destroy(void *thisptr);
long SecretKey_ParmsId(void *thisptr, uint64_t *parms_id);
long SecretKey_Pool(void *thisptr, void **pool);
long SecretKey_SaveSize(void *thisptr, uint8_t compr_mode, int64_t *result);
long SecretKey_Save(void *thisptr, uint8_t *outptr, uint64_t size, uint8_t compr_mode, int64_t *out_bytes);
long SecretKey_UnsafeLoad(void *thisptr, void *context, uint8_t *inptr, uint64_t size, int64_t *in_bytes);
long SecretKey_Load(void *thisptr, void *context, uint8_t *inptr, uint64_t size, int64_t *in_bytes);
long Serialization_SEALMagic(uint16_t *result);
long Serialization_SEALHeaderSize(uint8_t *result);
long Serialization_IsSupportedComprMode(uint8_t compr_mode, int *result);
long Serialization_ComprModeDefault(uint8_t *result);
long Serialization_IsCompatibleVersion(uint8_t *headerptr, uint64_t size, int *result);
long Serialization_IsValidHeader(uint8_t *headerptr, uint64_t size, int *result);
long ValCheck_Plaintext_IsValidFor(void *plaintext, void *context, int *result);
long ValCheck_Ciphertext_IsValidFor(void *ciphertext, void *context, int *result);
long ValCheck_SecretKey_IsValidFor(void *secret_key, void *context, int *result);
long ValCheck_PublicKey_IsValidFor(void *public_key, void *context, int *result);
long ValCheck_KSwitchKeys_IsValidFor(void *kswitch_keys, void *context, int *result);
long ValCheck_RelinKeys_IsValidFor(void *relin_keys, void *context, int *result);
long ValCheck_GaloisKeys_IsValidFor(void *galois_keys, void *context, int *result);
